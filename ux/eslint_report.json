[{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\jest.config.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":1,"column":19,"nodeType":"Program","messageId":"expectedLF","endLine":2,"endColumn":1,"fix":{"range":[18,20],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍`","line":1,"column":19,"nodeType":null,"messageId":"delete","endLine":1,"endColumn":20,"fix":{"range":[18,19],"text":""}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":2,"column":35,"nodeType":"Program","messageId":"expectedLF","endLine":3,"endColumn":1,"fix":{"range":[54,56],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍`","line":2,"column":35,"nodeType":null,"messageId":"delete","endLine":2,"endColumn":36,"fix":{"range":[54,55],"text":""}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":3,"column":13,"nodeType":"Program","messageId":"expectedLF","endLine":4,"endColumn":1,"fix":{"range":[68,70],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍`","line":3,"column":13,"nodeType":null,"messageId":"delete","endLine":3,"endColumn":14,"fix":{"range":[68,69],"text":""}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":4,"column":17,"nodeType":"Program","messageId":"expectedLF","endLine":5,"endColumn":1,"fix":{"range":[86,88],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍`","line":4,"column":17,"nodeType":null,"messageId":"delete","endLine":4,"endColumn":18,"fix":{"range":[86,87],"text":""}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":5,"column":20,"nodeType":"Program","messageId":"expectedLF","endLine":6,"endColumn":1,"fix":{"range":[107,109],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍`","line":5,"column":20,"nodeType":null,"messageId":"delete","endLine":5,"endColumn":21,"fix":{"range":[107,108],"text":""}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":6,"column":7,"nodeType":"Program","messageId":"expectedLF","endLine":7,"endColumn":1,"fix":{"range":[115,117],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍`","line":6,"column":7,"nodeType":null,"messageId":"delete","endLine":6,"endColumn":8,"fix":{"range":[115,116],"text":""}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":7,"column":5,"nodeType":"Program","messageId":"expectedLF","endLine":8,"endColumn":1,"fix":{"range":[121,123],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍`","line":7,"column":5,"nodeType":null,"messageId":"delete","endLine":7,"endColumn":6,"fix":{"range":[121,122],"text":""}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":8,"column":22,"nodeType":"Program","messageId":"expectedLF","endLine":9,"endColumn":1,"fix":{"range":[144,146],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍`","line":8,"column":22,"nodeType":null,"messageId":"delete","endLine":8,"endColumn":23,"fix":{"range":[144,145],"text":""}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":9,"column":34,"nodeType":"Program","messageId":"expectedLF","endLine":10,"endColumn":1,"fix":{"range":[179,181],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍`","line":9,"column":34,"nodeType":null,"messageId":"delete","endLine":9,"endColumn":35,"fix":{"range":[179,180],"text":""}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":10,"column":5,"nodeType":"Program","messageId":"expectedLF","endLine":11,"endColumn":1,"fix":{"range":[185,187],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍`","line":10,"column":5,"nodeType":null,"messageId":"delete","endLine":10,"endColumn":6,"fix":{"range":[185,186],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'^.+\\\\.ts?$':·'ts-jest'},␍` with `·'^.+\\\\.ts?$':·'ts-jest'·},`","line":11,"column":15,"nodeType":null,"messageId":"replace","endLine":11,"endColumn":41,"fix":{"range":[201,227],"text":" '^.+\\\\.ts?$': 'ts-jest' },"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":11,"column":40,"nodeType":"Program","messageId":"expectedLF","endLine":12,"endColumn":1,"fix":{"range":[226,228],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":12,"column":27,"nodeType":"Program","messageId":"expectedLF","endLine":13,"endColumn":1,"fix":{"range":[254,256],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍`","line":12,"column":27,"nodeType":null,"messageId":"delete","endLine":12,"endColumn":28,"fix":{"range":[254,255],"text":""}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":13,"column":39,"nodeType":"Program","messageId":"expectedLF","endLine":14,"endColumn":1,"fix":{"range":[294,296],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍`","line":13,"column":39,"nodeType":null,"messageId":"delete","endLine":13,"endColumn":40,"fix":{"range":[294,295],"text":""}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":14,"column":67,"nodeType":"Program","messageId":"expectedLF","endLine":15,"endColumn":1,"fix":{"range":[362,364],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `␍` with `,`","line":14,"column":67,"nodeType":null,"messageId":"replace","endLine":14,"endColumn":68,"fix":{"range":[362,363],"text":","}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":15,"column":3,"nodeType":"Program","messageId":"expectedLF","endLine":16,"endColumn":1,"fix":{"range":[366,368],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍⏎␍`","line":15,"column":3,"nodeType":null,"messageId":"delete","endLine":16,"endColumn":2,"fix":{"range":[366,369],"text":""}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":16,"column":1,"nodeType":"Program","messageId":"expectedLF","endLine":17,"endColumn":1,"fix":{"range":[368,370],"text":"\n"}}],"suppressedMessages":[],"errorCount":32,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":31,"fixableWarningCount":0,"source":"module.exports = {\r\n  extensionsToTreatAsEsm: ['.ts'],\r\n  globals: {\r\n    'ts-jest': {\r\n      useESM: true,\r\n    },\r\n  },\r\n  moduleNameMapper: {\r\n    '^(\\\\.{1,2}/.*)\\\\.js$': '$1',\r\n  },\r\n  transform: {'^.+\\\\.ts?$': 'ts-jest'},\r\n  testEnvironment: 'node',\r\n  testRegex: '.*/test/.*\\\\.(ts|tsx)$',\r\n  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']\r\n};\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_framework\\src\\environment.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_framework\\src\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[804,807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[804,807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2391,2394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2391,2394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-interface","severity":1,"message":"An empty interface is equivalent to `{}`.","line":198,"column":18,"nodeType":"Identifier","messageId":"noEmpty","endLine":198,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'providerUrl' is defined but never used.","line":284,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":284,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":436,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":436,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12060,12063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12060,12063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'targetDomain' is defined but never used.","line":452,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":452,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":453,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12476,12479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12476,12479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-interface","severity":1,"message":"An empty interface is equivalent to `{}`.","line":505,"column":11,"nodeType":"Identifier","messageId":"noEmpty","endLine":505,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SparqlParameters' is defined but never used.","line":505,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":505,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":536,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":536,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":553,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":553,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":572,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":572,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15167,15170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15167,15170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":591,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":591,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":604,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":604,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"//\n// Main logic of the skill framework\n// See copyright notice in the top folder\n// See authors file in the top folder\n// See license file in the top folder\n//\n\nimport fetch from 'node-fetch';\nimport { RequestInit } from 'node-fetch';\nimport createHttpsProxyAgent from 'https-proxy-agent';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\n\n/*\n * a connector factory\n */\nexport interface IConnectorFactory {\n  create: () => IConnector;\n}\n\n/**\n * the connector interface\n */\nexport interface IConnector {\n  /**\n   * function to list all assets of the default catalogue through this connector\n   * the providerUrl is an optional parameter (means that we will look for the local catalogue)\n   */\n\n  listAssets: (providerUrl?: string) => Promise<Catalogue>;\n  execute: (skill: string, ...queryVariables: any[]) => Promise<BindingSet>;\n}\n\n/**\n * an EDC (Federated) Catalogue\n */\nexport interface Catalogue {\n  /**\n   * the id of the catalogue\n   */\n  id: string;\n  /**\n   * the list of offers\n   */\n  contractOffers: ContractOffer[];\n}\n\n/**\n * an EDC offer\n */\nexport interface ContractOffer {\n  /**\n   * id of the offer\n   */\n  id: string;\n  /**\n   * optional id of the associated policy\n   */\n  policyId?: string;\n  /**\n   * optional id of the associated artifact/asset\n   */\n  assetId?: string | null;\n  /**\n   * the urn of the provider\n   */\n  provider: string;\n  /**\n   * the urn of the consumer\n   */\n  consumer: string;\n  /**\n   * if this offer is temporarily restricted: the start of the offer\n   */\n  offerStart?: string | null;\n  /**\n   * if this offer is temporarily restricted: the end of the offer\n   */\n  offerEnd?: string | null;\n  /**\n   * if the contract associated to this offer is temporarily restricted: the start of the contract\n   */\n  contractStart?: string | null;\n  /**\n   * if the contract associated to this offer is temporarily restricted: the end of the contract\n   */\n  contractEnd?: string | null;\n  /**\n   * the policy of the offer\n   */\n  policy: Policy;\n  /**\n   * the asset description of the offer\n   */\n  asset: Asset;\n}\n\n/**\n * a connector policy\n */\ninterface Policy {\n  /** unique id of the policy */\n  uid?: string | null;\n  /** a set of permissions */\n  permissions: Condition[];\n  /** a set of prohibitions */\n  prohibitions: Condition[];\n  /** a set of obligations */\n  obligations: Condition[];\n  /** this is extensible */\n  extensibleProperties: any;\n  /** policies may inherit from each other, this would be the uid of the parent policy if so */\n  inheritsFrom?: string | null;\n  /** the assigner of the policy */\n  assigner?: string | null;\n  /** the assignee of the policy */\n  assignee?: string | null;\n  /** the target of the policy (if restricted) */\n  target?: string | null;\n  /** the type of the policy */\n  '@type': PolicyTypeObject;\n}\n\n/**\n * different policy types\n * TODO wtf is that a set versus singelton or the policy is \"set\"/\"get\"?*/\nexport enum PolicyType {\n  /** set or set */\n  set = 'set',\n}\n\n/**\n * an object describing the policy type further\n */\ninterface PolicyTypeObject {\n  /** references the type */\n  '@policytype': PolicyType;\n}\n\n/**\n * an invividual permission, obligation or prohibition\n */\ninterface Condition {\n  /**\n   * type of condition\n   * TODO maybe we need an enum here\n   */\n  edctype: string;\n  /**\n   * condition may have a unique identifier\n   */\n  uid?: string | null;\n  /**\n   * a target of the condition\n   */\n  target: string;\n  /**\n   * the action that is permitted/prohibited or obliged\n   */\n  action: Action;\n  /**\n   * assignee of the condition\n   */\n  assignee?: string | null;\n  /**\n   * assigner of the condition\n   */\n  assigner?: string | null;\n  /** a set of constraints on the condition */\n  constraints: Constraint[];\n  /** a set of duties attached to the condition */\n  duties: Constraint[];\n}\n\n/**\n * different types of actions\n * TODO insert graph actions\n */\nexport enum ActionType {\n  /** do what you want with it */\n  USE = 'USE',\n}\n\n/**\n * an action in a condition\n */\nexport interface Action {\n  /** type of action */\n  type: ActionType;\n  /** TODO wtf */\n  includedIn?: string | null;\n  /** an action may also directly have a constraint */\n  constraint?: Constraint | null;\n}\n\n/**\n * TODO need to define constraints\n */\nexport interface Constraint {}\n\n/**\n * this is an asset description\n */\nexport interface Asset {\n  /** just a flexible property container */\n  properties: AssetProperties;\n}\n\n/**\n * the different types of endpoints/data planes supported\n */\nexport declare enum DataAddressEndpointType {\n  /** http data plane */\n  HttpData = 'HttpData',\n  /** Sparql subprotocol */\n  Sparql = 'urn:cx:Protocol:w3c:Http#SPARQL',\n}\n\n/**\n * the flexible properties of an asset\n */\nexport interface AssetProperties {\n  /** clear name of the asset  */\n  'asset:prop:name'?: string | null;\n  /** content type TODO use enum or media type  */\n  'asset:prop:contenttype': string;\n  /** optional size */\n  'ids:byteSize'?: number | null;\n  /** version of the asset descriptor */\n  'asset:prop:version'?: string | null;\n  /** id of the asset */\n  'asset:prop:id': string;\n  /** optional filename when downloading */\n  'ids:fileName'?: string | null;\n  /** a policy may be referenced directly  */\n  'asset:prop:policy-id'?: string;\n  /** whether its a federated asset */\n  'cx:isFederated'?: boolean | null;\n  /** asset description */\n  'asset:prop:description'?: string | null;\n  /** asset filename */\n  'asset:prop:fileName'?: string | null;\n  /** asset ontology */\n  'rdfs:isDefinedBy'?: string | null;\n  /** asset self-description in SHACL */\n  'cx:shape'?: string | null;\n  /** query subprotocol */\n  'cx:protocol'?: DataAddressEndpointType | null;\n  /** asset type */\n  'rdf:type'?: string | null;\n}\n\n/**\n * this is an artifact (complete description of asset and address part)\n */\nexport interface Artifact {\n  /** links an asset description */\n  asset: Asset;\n  /** with a data address description */\n  dataAddress: DataAddress;\n}\n\n/**\n * this is a dataaddress\n */\nexport interface DataAddress {\n  /** just a flexible container of properties */\n  properties: DataAddressProperties;\n}\n\n/**\n * the flexible properties of a data address\n */\nexport interface DataAddressProperties {\n  /** link to the backend system interfaced */\n  endpoint: string;\n  /** type of data plane attached */\n  type: DataAddressEndpointType;\n}\n\n/**\n * Implementation of a mock connector\n */\nclass MockConnector implements IConnector {\n  public listAssets(providerUrl?: string): Promise<Catalogue> {\n    return Promise.resolve({\n      id: 'catenax',\n      contractOffers: [\n        {\n          id: 'oemOffer:64640ec6-5566-353f-97c2-f82013f6956e',\n          policy: {\n            permissions: [\n              {\n                edctype: 'dataspaceconnector:permission',\n                uid: null,\n                target: 'urn:cx:Graph:oem:Diagnosis2022',\n                action: {\n                  type: ActionType.USE,\n                  includedIn: null,\n                  constraint: null,\n                },\n                assignee: null,\n                assigner: null,\n                constraints: [],\n                duties: [],\n              },\n            ],\n            prohibitions: [],\n            obligations: [],\n            extensibleProperties: {},\n            inheritsFrom: null,\n            assigner: null,\n            assignee: null,\n            target: 'urn:cx:Graph:oem:Diagnosis2022',\n            '@type': {\n              '@policytype': PolicyType.set,\n            },\n          },\n          asset: {\n            id: 'urn:cx:Graph:oem:Diagnosis2022',\n            createdAt: 1665051075480,\n            properties: {\n              'asset:prop:byteSize': null,\n              'asset:prop:name':\n                'Diagnostic Trouble Code Catalogue Version 2022',\n              'cx:isFederated': true,\n              'asset:prop:description':\n                'A sample graph asset/offering referring to a specific diagnosis resource.',\n              'asset:prop:contenttype': 'application/json, application/xml',\n              'rdfs:isDefinedBy':\n                'https://github.com/catenax-ng/product-knowledge/ontology/diagnosis_ontology.ttl',\n              'cx:shape':\n                '@prefix : <urn:cx:Graph:oem:Diagnosis2022> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\nOemDTC rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DTC ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003COJN> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:Affects ;\\n        sh:class OemDiagnosedParts ;\\n    ] ;\\n\\nOemDiagnosedParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DiagnosedPart ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003COJN> ;\\n    ] ;\\n',\n              'cx:protocol': undefined,\n              'asset:prop:version': '0.5.5-SNAPSHOT',\n              'asset:prop:id': 'urn:cx:Graph:oem:Diagnosis2022',\n              'asset:prop:fileName': null,\n              'rdf:type':\n                'https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#GraphAsset',\n            },\n          },\n          assetId: null,\n          provider: 'urn:connector:provider',\n          consumer: 'urn:connector:consumer',\n          offerStart: null,\n          offerEnd: null,\n          contractStart: null,\n          contractEnd: null,\n        },\n      ],\n    });\n  }\n\n  //execute\n  public execute(): Promise<BindingSet> {\n    return Promise.resolve({\n      head: {\n        vars: [\n          'vin',\n          'troubleCode',\n          'description',\n          'partProg',\n          'distance',\n          'time',\n        ],\n      },\n      results: {\n        bindings: [\n          {\n            vin: {\n              type: 'literal',\n              value: 'WVA8984323420333',\n            },\n            troubleCode: {\n              type: 'literal',\n              value: 'P0745',\n            },\n            description: {\n              type: 'literal',\n              value: 'Getriebeöldruck-Magnetventil - Fehlfunktion Stromkreis',\n            },\n            partProg: {\n              type: 'literal',\n              value: '\"GearOil\"',\n            },\n            distance: {\n              type: 'literal',\n              datatype: 'http://www.w3.org/2001/XMLSchema#int',\n              value: '150',\n            },\n            time: {\n              type: 'literal',\n              datatype: 'http://www.w3.org/2001/XMLSchema#int',\n              value: '2',\n            },\n          },\n        ],\n      },\n    });\n  }\n}\n\n/**\n * mock connector factory\n */\nexport class EnvironmentConnectorFactory implements IConnectorFactory {\n  private environmentConnector: IConnector;\n\n  constructor() {\n    if (\n      process.env.REACT_APP_SKILL_CONNECTOR_CONTROL != undefined &&\n      process.env.REACT_APP_SKILL_CONNECTOR_DATA != undefined &&\n      process.env.REACT_APP_SKILL_CONNECTOR_CONTROL != '' &&\n      process.env.REACT_APP_SKILL_CONNECTOR_DATA != ''\n    ) {\n      this.environmentConnector = new RemoteConnector(\n        process.env.REACT_APP_SKILL_CONNECTOR_CONTROL,\n        process.env.REACT_APP_SKILL_CONNECTOR_DATA,\n        undefined,\n        process.env.REACT_APP_SKILL_PROXY\n      );\n    } else {\n      this.environmentConnector = new MockConnector();\n    }\n  }\n\n  public create() {\n    return this.environmentConnector;\n  }\n}\n\ninterface IRealmMappingFactory {\n  create: () => IRealmMapping;\n}\n\ninterface IRealmMapping {\n  getHeaderAnnotation: (targetDomain: string) => any;\n}\n\nclass EnvironmentRealmMappingFactory implements IRealmMappingFactory {\n  private environmentRealmMapping: IRealmMapping;\n\n  constructor() {\n    this.environmentRealmMapping = new EnvironmentRealmMapping();\n  }\n\n  public create() {\n    return this.environmentRealmMapping;\n  }\n}\n\nclass EnvironmentRealmMapping implements IRealmMapping {\n  public getHeaderAnnotation(targetDomain: string) {\n    const headers: any = {};\n    if (process.env.REACT_APP_SKILL_CONNECTOR_AUTH_HEADER_KEY != undefined) {\n      headers[process.env.REACT_APP_SKILL_CONNECTOR_AUTH_HEADER_KEY ?? ''] =\n        process.env.REACT_APP_SKILL_CONNECTOR_AUTH_HEADER_VALUE;\n    }\n    return headers;\n  }\n}\n\n/**\n * global factory variable\n */\nlet realmMappingFactory: IRealmMappingFactory =\n  new EnvironmentRealmMappingFactory();\n\n/**\n * @returns the global connector factory\n */\nexport const getRealmMappingFactory = function () {\n  return realmMappingFactory;\n};\n\n/**\n * sets\n * @param factory the new global factory\n */\n\nexport const setRealmMappingFactory = function (factory: IRealmMappingFactory) {\n  realmMappingFactory = factory;\n};\n\nexport interface BindingSet {\n  head: Head;\n  results: Binding;\n}\n\ninterface Head {\n  vars: string[];\n}\n\ninterface Binding {\n  bindings: Entry[];\n}\n\ninterface Entry {\n  [key: string]: Value;\n}\n\ninterface Value {\n  value: string;\n}\n\ninterface SparqlParameters {}\n\n/**\n * Implementation of a remote connector\n */\nclass RemoteConnector implements IConnector {\n  private url: string;\n  private data_url: string;\n  private realmMapping: IRealmMapping;\n  private proxy?: HttpsProxyAgent;\n\n  constructor(\n    url: string,\n    data_url: string,\n    realmMapping?: IRealmMapping,\n    proxy?: string\n  ) {\n    this.url = url;\n    this.data_url = data_url;\n    this.realmMapping = realmMapping ?? getRealmMappingFactory().create();\n    if (proxy) {\n      this.proxy = createHttpsProxyAgent(proxy);\n    }\n  }\n\n  //List Asset\n  public async listAssets(providerUrl?: string): Promise<Catalogue> {\n    const start = new Date().getTime();\n    const finalproviderUrl = providerUrl ?? this.url;\n    const idsUrl = `${finalproviderUrl}/api/v1/ids/data`;\n\n    console.log(\n      `Listing Assets from Remote Connector ${finalproviderUrl} starts at ${start}.`\n    );\n\n    const finalUrl = `${this.url}/data/catalog?providerUrl=${idsUrl}`;\n\n    const fetchOpts: RequestInit = {\n      method: 'GET',\n      headers: this.realmMapping.getHeaderAnnotation(this.url),\n      agent: this.proxy,\n    };\n\n    // 👇️ const response: Response\n    const response = await fetch(finalUrl, fetchOpts);\n\n    const elapsed = new Date().getTime() - start;\n\n    console.log(\n      `Listing Assets from Remote Connector finished after ${elapsed} milliseconds.`\n    );\n\n    if (!response.ok) {\n      throw new Error(`Error! status: ${response.status}`);\n    }\n\n    // 👇️ const result: GetUsersResponse\n    const result = (await response.json()) as Catalogue;\n\n    //console.log('result is: ', JSON.stringify(result, null, 4));\n\n    return result;\n  }\n\n  //Execute Query\n  public async execute(\n    skill: string,\n    ...queryVariables: any[]\n  ): Promise<BindingSet> {\n    const start = new Date().getTime();\n\n    const skillUrl = '/api/agent?asset=urn:cx:Skill:consumer:' + skill;\n    let parameters = '';\n    let parametersContainer = '';\n\n    queryVariables.map((query) => {\n      Object.entries(query).forEach(\n        ([key, value]) => (parameters = `${parameters}&${key}=${value}`)\n      );\n      parameters = parameters.replace(/^&/, '');\n      parametersContainer = parametersContainer + '&(' + parameters + ')';\n      parameters = '';\n    });\n\n    const finalUrl = this.data_url + skillUrl + parametersContainer;\n\n    console.log(finalUrl);\n\n    const fetchOpts: RequestInit = {\n      method: 'GET',\n      headers: this.realmMapping.getHeaderAnnotation(this.url),\n      agent: this.proxy,\n    };\n\n    //Response\n    const response = await fetch(finalUrl, fetchOpts);\n\n    const elapsed = new Date().getTime() - start;\n\n    console.log(\n      `Result from Remote Connector finished after ${elapsed} milliseconds.`\n    );\n\n    if (!response.ok) {\n      throw new Error(`Error! status: ${response.status}`);\n    }\n\n    //result: BindingSet\n    const result = (await response.json()) as BindingSet;\n\n    return result;\n  }\n}\n\n/**\n * global factory variable\n */\nlet connectorFactory: IConnectorFactory = new EnvironmentConnectorFactory();\n\n/**\n * @returns the global connector factory\n */\nexport const getConnectorFactory = function () {\n  return connectorFactory;\n};\n\n/**\n * sets\n * @param factory the new global factory\n */\n\nexport const setConnectorFactory = function (factory: IConnectorFactory) {\n  connectorFactory = factory;\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_framework\\test\\index.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":18,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":18,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":21,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":21,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":27,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":27,"endColumn":18},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":18},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":18},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":16},{"ruleId":"no-loops/no-loops","severity":2,"message":"loops are not allowed","line":102,"column":7,"nodeType":"ForStatement","endLine":104,"endColumn":8},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":139,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":16},{"ruleId":"no-loops/no-loops","severity":2,"message":"loops are not allowed","line":141,"column":7,"nodeType":"ForStatement","endLine":143,"endColumn":8},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"//\n// Test logic for the skill framework\n// See copyright notice in the top folder\n// See authors file in the top folder\n// See license file in the top folder\n//\n\nimport { getConnectorFactory } from '../src/index';\nimport { jest } from '@jest/globals';\n\n/**\n * test:get assets\n */\ndescribe('testing skill framework', () => {\n  jest.setTimeout(15000);\n  test('assets should be returned', async () => {\n    const connector = getConnectorFactory().create();\n    console.log(`Got connector ${connector}.`);\n    const catalogue = await connector.listAssets();\n    expect(catalogue.id).toBeDefined();\n    console.log(`Found catalog ${catalogue.id}.`);\n    expect(catalogue.contractOffers).toBeDefined();\n    expect(catalogue.contractOffers.length).toBeGreaterThan(0);\n    console.log(`Found ${catalogue.contractOffers.length} offers.`);\n    catalogue.contractOffers.map(function (contractOffer) {\n      expect(contractOffer).toHaveProperty('id');\n      console.log(`Found offer ${contractOffer.id}.`);\n      expect(contractOffer).toHaveProperty('policy');\n      expect(contractOffer).toHaveProperty('asset');\n      expect(contractOffer.asset).toHaveProperty('properties');\n      expect(contractOffer.asset.properties).toHaveProperty('asset:prop:id');\n      expect(contractOffer.asset.properties).toHaveProperty('asset:prop:name');\n      console.log(\n        `Found asset ${contractOffer.asset.properties['asset:prop:name']} in offer ${contractOffer.id}.`\n      );\n      expect(contractOffer.asset.properties).toHaveProperty(\n        'asset:prop:contenttype'\n      );\n    });\n  });\n});\n\n/**\n * test: get lifetime\n */\ndescribe('testing skill framework', () => {\n  jest.setTimeout(60000);\n  test('lifetime should be returned ', async () => {\n    const connector = getConnectorFactory().create();\n\n    console.log(`Got connector ${connector}.`);\n\n    const queryVariables = { vin: 'WVA8984323420333', troubleCode: 'P0745' };\n\n    const result = await connector.execute('Lifetime', queryVariables);\n\n    result.results.bindings.map(function (entry) {\n      console.log(\n        'Result as parsed JSON \\n' +\n          '  vin:  ' +\n          entry.vin.value +\n          '\\n' +\n          '  troubleCode:  ' +\n          entry.troubleCode.value +\n          '\\n' +\n          '  partProg: ' +\n          entry.partProg.value +\n          '\\n' +\n          '  distance: ' +\n          entry.distance.value +\n          '\\n' +\n          '  time: ' +\n          entry.time.value\n      );\n    });\n  });\n});\n\n/**\n * test: Search\n */\ndescribe('testing skill framework', () => {\n  jest.setTimeout(60000);\n  test('Troublecode search results should be returned', async () => {\n    const connector = getConnectorFactory().create();\n\n    console.log(`Got connector ${connector}.`);\n\n    const queryVariables = {\n      vin: 'WBAAL31029PZ00001',\n      problemArea: 'Getriebe',\n      minVersion: 1,\n    };\n\n    const result = await connector.execute('TroubleCodeSearch', queryVariables);\n\n    const var_size = result.head.vars.length;\n    const vars = result.head.vars;\n\n    console.log('Query results');\n    result.results.bindings.map(function (entry) {\n      for (let i = 0; i < var_size; i++) {\n        console.log(entry[vars[i]].value);\n      }\n    });\n  });\n});\n\n/**\n * test: Search 2\n */\ndescribe('testing skill framework', () => {\n  jest.setTimeout(60000);\n  test('Troublecode search results should be returned for multiple parameters', async () => {\n    const connector = getConnectorFactory().create();\n\n    console.log(`Got connector ${connector}.`);\n\n    const queryVariables = {\n      vin: 'WBAAL31029PZ00001',\n      problemArea: 'Getriebe',\n      minVersion: 1,\n    };\n    const queryVariables_1 = {\n      vin: 'WBAAL31029PZ00001',\n      problemArea: 'Getriebe',\n      minVersion: 1,\n    };\n\n    const result = await connector.execute(\n      'TroubleCodeSearch',\n      queryVariables,\n      queryVariables_1\n    );\n\n    const var_size = result.head.vars.length;\n    const vars = result.head.vars;\n\n    console.log('Query results');\n    result.results.bindings.map(function (entry) {\n      for (let i = 0; i < var_size; i++) {\n        console.log(entry[vars[i]].value);\n      }\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_gym\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_gym\\src\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_gym\\src\\pages\\Search.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_gym\\src\\pages\\SkillGym.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_gym\\src\\react-app-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_gym\\src\\setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_modules\\rollup.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_modules\\src\\components\\AssetView\\AssetList\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_modules\\src\\components\\AssetView\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_modules\\src\\components\\CustomSearch\\index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Typography' is defined but never used.","line":10,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSkillList' is assigned a value but never used.","line":40,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[839,842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[839,842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setErrorVin' is assigned a value but never used.","line":43,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1713,1716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1713,1716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Box,\n  Paper,\n  Chip,\n  Select,\n  InputLabel,\n  MenuItem,\n  FormControl,\n} from '@mui/material';\nimport { Button, Input, Typography } from 'cx-portal-shared-components';\nimport { useEffect, useState } from 'react';\nimport {\n  BindingSet,\n  getConnectorFactory,\n} from '@knowledge-agents-ux/skill_framework/dist/src';\nimport React from 'react';\n\ninterface ChipData {\n  key: number;\n  label: string;\n}\n\nconst defaultSkills = [\n  {\n    title: 'Trouble Code Search',\n    value: 'TroubleCodeSearch',\n  },\n  {\n    title: 'Example Skill',\n    value: 'example',\n  },\n];\n\ninterface CustomSearchProps {\n  onSearchResult: (result: BindingSet) => void;\n}\n\nexport const CustomSearch = ({ onSearchResult }: CustomSearchProps) => {\n  const [selectedSkill, setSelectedSkill] = useState<string>('');\n  const [skillList, setSkillList] = useState<any[]>(defaultSkills);\n  const [searchVin, setSearchVin] = useState<string>('');\n  const [keywordInput, setKeywordInput] = useState<string>('');\n  const [errorVin, setErrorVin] = useState<boolean>(false);\n  const [chipData, setChipData] = useState<ChipData[]>([]);\n  const [disableButton, setDisableButton] = useState<boolean>(false);\n\n  const onVinSearchChange = (value: string) => {\n    setSearchVin(value);\n  };\n\n  const onChipDelete = (deleteChip: ChipData) => {\n    setChipData((chips) => chips.filter((chip) => chip.key !== deleteChip.key));\n  };\n\n  const onKeywordInputChange = (value: string) => {\n    if (value.includes(' ')) {\n      const newChip = { key: chipData.length, label: value.trim() };\n      setChipData((prevState) => [...prevState, newChip]);\n      setKeywordInput('');\n    } else {\n      setKeywordInput(value);\n    }\n  };\n  const hasNoValue = (item: any) => item.length === 0;\n\n  useEffect(() => {\n    const isDisabled =\n      hasNoValue(selectedSkill) ||\n      hasNoValue(searchVin) ||\n      (hasNoValue(chipData) && hasNoValue(keywordInput));\n    setDisableButton(isDisabled);\n  }, [selectedSkill, searchVin, chipData, keywordInput]);\n\n  const onSearch = () => {\n    let queryVars;\n    if (hasNoValue(chipData)) {\n      queryVars = { vin: searchVin, problemArea: keywordInput, minVersion: 1 };\n    } else {\n      queryVars = chipData.map((keyword) => ({\n        vin: searchVin,\n        problemArea: keyword.label,\n        minVersion: 1,\n      }));\n    }\n    console.log(queryVars);\n    const connector = getConnectorFactory().create();\n    connector.execute(selectedSkill, queryVars).then((result) => {\n      console.log(result);\n      onSearchResult(result);\n    });\n  };\n\n  return (\n    <Paper elevation={3} sx={{ padding: 3 }}>\n      <FormControl fullWidth sx={{ mb: 3 }}>\n        <InputLabel id=\"skill-select-label\">Select a skill</InputLabel>\n        <Select\n          labelId=\"skill-select-label\"\n          id=\"skill-select\"\n          value={selectedSkill}\n          label=\"Select a skill\"\n          onChange={(e) => setSelectedSkill(e.target.value)}\n        >\n          {skillList.map((skill) => (\n            <MenuItem key={skill.value} value={skill.value}>\n              {skill.title}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      {selectedSkill && (\n        <>\n          <Input\n            error={errorVin}\n            helperText=\"The entered VIN does not match a VIN format.\"\n            value={searchVin}\n            onChange={(e) => onVinSearchChange(e.target.value)}\n            placeholder=\"VIN\"\n          />\n          <Box mt={2} mb={3}>\n            <Box mb={2}>\n              {chipData.map((data) => {\n                return (\n                  <Chip\n                    color=\"primary\"\n                    key={data.key}\n                    label={data.label}\n                    onDelete={() => onChipDelete(data)}\n                    clickable={true}\n                  />\n                );\n              })}\n            </Box>\n            <Input\n              value={keywordInput}\n              onChange={(e) => onKeywordInputChange(e.target.value)}\n              placeholder=\"Enter a key word\"\n            />\n          </Box>\n          <Button disabled={disableButton} fullWidth onClick={onSearch}>\n            Search Data\n          </Button>\n        </>\n      )}\n    </Paper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_modules\\src\\components\\OntologyView\\DefaultGraphStyles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_modules\\src\\components\\OntologyView\\Layouts.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37,40],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37,40],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const Layouts: Record<string, any> = {\n  random: {\n    name: 'random',\n    animate: true,\n    label: 'Random',\n  },\n  grid: {\n    name: 'grid',\n    animate: true,\n    nodeDimensionsIncludeLabels: true,\n    label: 'Grid',\n  },\n  circle: {\n    name: 'circle',\n    animate: true,\n    label: 'Circle',\n  },\n  concentric: {\n    name: 'concentric',\n    animate: true,\n    nodeDimensionsIncludeLabels: true,\n    label: 'Concentric',\n  },\n  dagre: {\n    name: 'dagre',\n    animate: true,\n    label: 'Hierarchy (Dagre)',\n  },\n  breadthfirst: {\n    name: 'breadthfirst',\n    animate: true,\n    grid: true,\n    label: 'efficient Hierarchy',\n    padding: 50,\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_modules\\src\\components\\OntologyView\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_modules\\src\\components\\OntologyView\\setupCy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_modules\\src\\components\\OntologyView\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_modules\\src\\components\\QueryEditor\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_modules\\src\\components\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\A200092999\\Code\\product-knowledge\\ux\\skill_modules\\src\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]