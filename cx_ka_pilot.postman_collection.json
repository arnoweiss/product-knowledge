{
	"info": {
		"_postman_id": "6a1813a3-766d-42e2-962d-3b340fbba397",
		"name": "Knowledge Agents Pilot",
		"description": "A collection of API calls against various services of the Knowledge Agents Pilot.\n\nAlso contains a special integration test subfolder.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2757771"
	},
	"item": [
		{
			"name": "Dataspace",
			"item": [
				{
					"name": "OEM (Providing)",
					"item": [
						{
							"name": "Provisioning Agent (Intern)",
							"item": [
								{
									"name": "Query the Provisioning Agent",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT ?reason ?code ?description ?version ?partend ?partcat ?partclass WHERE {\n  # Select Business Partner\n  ?Oem cx:BPNL \"BPNL00000003COJN\".\n\n  # Search for Trouble Codes of the Business Partner\n  # related to a cause in the \"Kabelbaum\"\n  ?Dtc rdf:type cx-diag:DTC.\n  ?Dtc cx:provisionedBy ?Oem.\n  ?Dtc cx-diag:PossibleCauses ?reason.\n  FILTER contains(?reason,\"Kabelbaum\").\n  ?Dtc cx-diag:Code ?code.\n  ?Dtc cx-diag:Description ?description.\n  ?Dtc cx-diag:Version ?version.\n\n  # Navigate to the affected parts\n  # and show only parts with a classification \"Powertrain\"\n  ?Dtc cx-diag:affects ?Part.\n  ?Part cx-diag:Category ?partcat.\n  ?Part cx-diag:EnDenomination ?partend.\n  ?Part cx-diag:Classification ?partclass.\n  FILTER contains(?partclass,'Powertrain').\n\n} LIMIT 40\n"
										},
										"url": {
											"raw": "{{provisioningAgent}}/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"sparql"
											]
										}
									},
									"response": []
								}
							],
							"description": "A Collection of API Calls Against the Data Provisioning Agents Directly Which Sits upon some Data Source.",
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{oemPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{oemUser}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "EDC (Intern)",
							"item": [
								{
									"name": "Check Probe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check was successful\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json()).to.have.property(\"isSystemHealthy\",true);",
													"    pm.expect(pm.response.json()).to.have.property(\"componentResults\");",
													"    pm.expect(pm.response.json().componentResults).to.have.length.greaterThan(0);",
													"    pm.response.json().componentResults.map( function(component) {",
													"        pm.expect(component).to.have.property(\"isHealthy\",true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/api/check/:stage",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"api",
												"check",
												":stage"
											],
											"variable": [
												{
													"key": "stage",
													"value": "startup",
													"description": "You may choose startup, readiness or liveness"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Graph Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:graph:oem:Diagnosis2022\",\n      \"asset:prop:name\": \"Diagnostic Trouble Code Catalogue Version 2022\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"asset:prop:policy-id\": \"research\",\n      \"asset:prop:cx:requesttype\": \"application/sparql\",\n      \"asset:prop:cx:apitype\": \"application/knowledge-agent-query\",\n      \"asset:prop:cx:ontology\": \"https://github.com/catenax-ng/product-knowledge/ontology#\",\n      \"asset:prop:cx:ontologyVersion\": \"https://github.com/catenax-ng/product-knowledge/tree/main\",\n      \"asset:prop:cx:shapesGraph\": \"@prefix : <urn:cx:graph:oem:Diagnosis2022> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\nOemDTC rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DTC ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003COJN> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:Affects ;\\n        sh:class OemDiagnosedParts ;\\n    ] ;\\n\\nOemDiagnosedParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DiagnosedPart ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003COJN> ;\\n    ] ;\\n\",\n      \"asset:prop:cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"endpoint\": \"http://oem-provider-agent:8080/sparql\",\n      \"type\": \"HttpData\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/assets",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph asset."
									},
									"response": []
								},
								{
									"name": "Create Graph Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"uid\": \"231802-bb34-11ec-8422-0242ac120002\",\n  \"permissions\": [\n    {\n      \"target\": \"urn:cx:graph:oem*\",\n      \"action\": {\n        \"type\": \"USE\"\n      },\n      \"edctype\": \"dataspaceconnector:permission\"\n    }\n  ],\n  \"@type\": {\n    \"@policytype\": \"set\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/policies",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"policies"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph policy."
									},
									"response": []
								},
								{
									"name": "Create Graph Contract Definition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"1\",\n  \"accessPolicyId\": \"231802-bb34-11ec-8422-0242ac120002\",\n  \"contractPolicyId\": \"231802-bb34-11ec-8422-0242ac120002\",\n  \"criteria\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/contractdefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"contractdefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								},
								{
									"name": "List Assets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(asset) {",
													"        pm.expect(asset).to.have.property(\"properties\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"        var contenttypes=asset.properties[\"asset:prop:contenttype\"].split(\",\").map(function(type) { return type.trim();});",
													"        contenttypes.map(function(contenttype) {",
													"            var contenttypespec=contenttype.split(\";\");",
													"            pm.expect(contenttypespec[0]).oneOf([\"application/json\",\"application/xml\",\"application/cx-skill\"]);",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/assets",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"assets"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the assets."
									},
									"response": []
								},
								{
									"name": "List Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/policies",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"policies"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "Show Catalogue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Catalogue listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"id\");",
													"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
													"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
													"    pm.response.json().contractOffers.map(function(contracts) {",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/catalog?providerUrl={{oemEdcControl}}/api/v1/ids/data",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"catalog"
											],
											"query": [
												{
													"key": "providerUrl",
													"value": "http://connector.cx-rel.edc.aws.bmw.cloud:8282/BPNL00000003AYRE/api/v1/ids/data",
													"disabled": true
												},
												{
													"key": "providerUrl",
													"value": "{{oemEdcControl}}/api/v1/ids/data"
												}
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"description": "A Collection of API Calls Against the Provisioning Components of the Dataspace.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{oemPassword}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{oemUser}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "TierA (Remoting)",
					"item": [
						{
							"name": "Remoting Agent (Intern)",
							"item": [
								{
									"name": "Test the Public Service",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.agify.io?name=Schorsch",
											"protocol": "https",
											"host": [
												"api",
												"agify",
												"io"
											],
											"query": [
												{
													"key": "name",
													"value": "Schorsch",
													"description": "Prognosis Input, here a primitve string"
												}
											]
										},
										"description": "An example of a public prognosis service."
									},
									"response": []
								},
								{
									"name": "Test the Backend Service",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "load_collective_file",
													"description": "Input is given as a binary json file",
													"type": "file",
													"src": "/Users/A29078924/Downloads/Fzg1_LCollective.json"
												}
											]
										},
										"url": {
											"raw": "http://localhost:5005/api/rul",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5005",
											"path": [
												"api",
												"rul"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "Check the Remoting Agent",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{remotingAgent}}/protocol",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"protocol"
											]
										},
										"description": "This endpoint should return the number of supported protocols and can be used as a healthcheck."
									},
									"response": []
								},
								{
									"name": "Query Public/Simple Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX prognosis: <https://github.com/catenax-ng/product-knowledge/ontology/prognosis.ttl#>\n\nSELECT ?invocation ?prediction ?support\nWHERE { \n  ?invocation a prognosis:Prognosis;         \n              prognosis:name \"Schorsch\"^^xsd:string; \n              prognosis:prediction ?prediction; \n              prognosis:support ?support; \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/prognosis",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"prognosis"
											]
										},
										"description": "A sample SparQL query against a simple invocation with only primitive inputs and outputs."
									},
									"response": []
								},
								{
									"name": "Query Complex/Backend Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\nSELECT ?invocation ?distance ?time\nWHERE { \n  ?invocation a cx-lifetime:LifetimePrognosis;         \n              cx-lifetime:loadCollective \"{  \\\"File\\\": {  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }, \\\"Header\\\": {    \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  },  \\\"Body\\\": {     \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\\n,  \\\"Metadata\\\": { \\\"OEM\\\": \\\"BMW\\\", \\\"VIN\\\": 8976543761,  \\\"Component\\\": \\\"GearOil\\\",    \\\"Mileage\\\": { \\\"Value\\\": 82563, \\\"Unit\\\": \\\"km\\\" },    \\\"RegistrationDate\\\": { \\\"Value\\\": 20171206,  \\\"Unit\\\": \\\"yyyymmdd\\\" } } }\"^^xsd:string; \n              cx-lifetime:remainingDistance ?distance; \n              cx-lifetime:remainingTime ?time.\n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/prognosis",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"prognosis"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								}
							],
							"description": "A Collection of API Calls Against the Data Provisioning Agents Directly Which Sits upon some Data Source.",
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{oemPassword}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{oemUser}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "A Collection of API Calls Against the Dataspace Components."
		}
	]
}